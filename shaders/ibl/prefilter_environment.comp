#version 450

// Prefilter Environment Map Compute Shader
// Generates pre-filtered specular IBL map using GGX importance sampling

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 5) uniform samplerCube environmentMap;
layout(set = 0, binding = 3, rgba16f) uniform writeonly imageCube prefilteredMap;

layout(push_constant) uniform PushConstants {
    float roughness;      // Roughness level for this mip (0.0 - 1.0)
    uint sampleCount;     // Number of samples per pixel
    uint resolution;      // Resolution of current mip level
} pc;

const float PI = 3.14159265359;
const float TWO_PI = 6.28318530718;

// Convert cubemap face coordinates to world-space direction vector
vec3 get_cubemap_direction(uint face, vec2 uv) {
    vec2 st = uv * 2.0 - 1.0;

    vec3 direction;

    switch (face) {
        case 0: direction = vec3(1.0, -st.y, -st.x); break;
        case 1: direction = vec3(-1.0, -st.y, st.x); break;
        case 2: direction = vec3(st.x, 1.0, st.y); break;
        case 3: direction = vec3(st.x, -1.0, -st.y); break;
        case 4: direction = vec3(st.x, -st.y, 1.0); break;
        case 5: direction = vec3(-st.x, -st.y, -1.0); break;
    }

    return normalize(direction);
}

// Construct orthonormal basis from normal vector
mat3 build_tangent_space(vec3 N) {
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    return mat3(tangent, bitangent, N);
}

// Hammersley sequence for low-discrepancy sampling
vec2 hammersley(uint i, uint N) {
    uint bits = i;
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    float rdi = float(bits) * 2.3283064365386963e-10;
    return vec2(float(i) / float(N), rdi);
}

// GGX importance sampling
vec3 importance_sample_ggx(vec2 Xi, vec3 N, float roughness) {
    float a = roughness * roughness;

    // Spherical coordinates
    float phi = TWO_PI * Xi.x;
    float cos_theta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    // Tangent space half vector
    vec3 H;
    H.x = cos(phi) * sin_theta;
    H.y = sin(phi) * sin_theta;
    H.z = cos_theta;

    // Transform to world space
    mat3 tangent_to_world = build_tangent_space(N);
    return normalize(tangent_to_world * H);
}

// GGX normal distribution function
float distribution_ggx(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return a2 / max(denom, 0.0001);
}

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    uint face_index = gl_GlobalInvocationID.z;

    // Bounds check
    if (pixel_coords.x >= int(pc.resolution) || pixel_coords.y >= int(pc.resolution) || face_index >= 6) {
        return;
    }

    // Normalize pixel coordinates to [0, 1]
    vec2 uv = (vec2(pixel_coords) + 0.5) / float(pc.resolution);

    // Get reflection direction for this pixel
    vec3 N = get_cubemap_direction(face_index, uv);
    vec3 R = N; // Reflection direction equals normal for pre-filtering
    vec3 V = R; // View direction for specular

    // Pre-filter environment map using importance sampling
    vec3 prefiltered_color = vec3(0.0);
    float total_weight = 0.0;

    uint sample_count = pc.sampleCount;

    for (uint i = 0u; i < sample_count; ++i) {
        // Generate low-discrepancy sample
        vec2 Xi = hammersley(i, sample_count);

        // Importance sample GGX distribution
        vec3 H = importance_sample_ggx(Xi, N, pc.roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);

        if (NdotL > 0.0) {
            // Sample environment at this direction
            // For very rough surfaces, sample lower mip levels to reduce noise
            float D = distribution_ggx(N, H, pc.roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;

            // Solid angle of texel
            float resolution = 512.0; // Base environment map resolution
            float sa_texel = 4.0 * PI / (6.0 * resolution * resolution);
            float sa_sample = 1.0 / (float(sample_count) * pdf + 0.0001);

            // Compute mip level for importance sampling
            float mip_level = pc.roughness == 0.0 ? 0.0 : 0.5 * log2(sa_sample / sa_texel);

            vec3 sample_color = textureLod(environmentMap, L, mip_level).rgb;

            prefiltered_color += sample_color * NdotL;
            total_weight += NdotL;
        }
    }

    // Average
    if (total_weight > 0.0) {
        prefiltered_color /= total_weight;
    }

    // Write to output
    imageStore(prefilteredMap, ivec3(pixel_coords, face_index), vec4(prefiltered_color, 1.0));
}