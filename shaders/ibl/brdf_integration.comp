#version 450

// BRDF Integration Compute Shader
// Pre-computes the split-sum approximation lookup table for specular IBL

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 4, rg16f) uniform writeonly image2D brdfLUT;

layout(push_constant) uniform PushConstants {
    uint sampleCount; // Number of samples per pixel (e.g., 512)
} pc;

const float PI = 3.14159265359;
const float TWO_PI = 6.28318530718;

// Hammersley sequence for low-discrepancy sampling
vec2 hammersley(uint i, uint N) {
    uint bits = i;
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    float rdi = float(bits) * 2.3283064365386963e-10;
    return vec2(float(i) / float(N), rdi);
}

// GGX importance sampling
vec3 importance_sample_ggx(vec2 Xi, vec3 N, float roughness) {
    float a = roughness * roughness;

    float phi = TWO_PI * Xi.x;
    float cos_theta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    // Tangent space half vector
    vec3 H;
    H.x = cos(phi) * sin_theta;
    H.y = sin(phi) * sin_theta;
    H.z = cos_theta;

    // Transform to world space (assuming N = [0, 0, 1])
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    return normalize(tangent * H.x + bitangent * H.y + N * H.z);
}

// Schlick-GGX geometry function
float geometry_schlick_ggx(float NdotV, float roughness) {
    float a = roughness;
    float k = (a * a) / 2.0; // IBL k factor

    float denom = NdotV * (1.0 - k) + k;
    return NdotV / denom;
}

// Smith geometry function (combines both view and light directions)
float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = geometry_schlick_ggx(NdotV, roughness);
    float ggx1 = geometry_schlick_ggx(NdotL, roughness);

    return ggx1 * ggx2;
}

// Integrate BRDF for given NdotV and roughness
vec2 integrate_brdf(float NdotV, float roughness) {
    // View direction (assuming N = [0, 0, 1])
    vec3 V;
    V.x = sqrt(1.0 - NdotV * NdotV); // sin(theta)
    V.y = 0.0;
    V.z = NdotV; // cos(theta)

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    uint sample_count = pc.sampleCount;

    for (uint i = 0u; i < sample_count; ++i) {
        // Generate low-discrepancy sample
        vec2 Xi = hammersley(i, sample_count);

        // Importance sample GGX
        vec3 H = importance_sample_ggx(Xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0) {
            // Geometry term
            float G = geometry_smith(N, V, L, roughness);

            // Fresnel term (Schlick approximation)
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    A /= float(sample_count);
    B /= float(sample_count);

    return vec2(A, B);
}

void main() {
    ivec2 lut_size = imageSize(brdfLUT);
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    // Bounds check
    if (pixel_coords.x >= lut_size.x || pixel_coords.y >= lut_size.y) {
        return;
    }

    // Normalize coordinates to [0, 1]
    vec2 uv = (vec2(pixel_coords) + 0.5) / vec2(lut_size);

    // X-axis: NdotV (cosine of view angle)
    // Y-axis: Roughness
    float NdotV = uv.x;
    float roughness = uv.y;

    // Integrate BRDF
    vec2 brdf = integrate_brdf(NdotV, roughness);

    // Write to LUT
    imageStore(brdfLUT, pixel_coords, vec4(brdf, 0.0, 0.0));
}