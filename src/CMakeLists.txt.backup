# Lore Engine Core Systems
# This file coordinates the building of all core engine systems

# Core engine systems in dependency order
add_subdirectory(ecs)      # Entity-Component-System (base dependency)
add_subdirectory(math)     # SIMD-accelerated math library
add_subdirectory(physics)  # Physics simulation system
add_subdirectory(audio)    # 3D spatial audio system
add_subdirectory(graphics) # Vulkan-based graphics system

# Create convenience target for all core systems
add_library(lore_engine INTERFACE)

# Link all core systems to the engine interface
target_link_libraries(lore_engine
    INTERFACE
        lore::ecs
        lore::math
        lore::physics
        lore::audio
        lore::graphics
)

# Engine-wide compile definitions
target_compile_definitions(lore_engine
    INTERFACE
        LORE_ENGINE_VERSION_MAJOR=1
        LORE_ENGINE_VERSION_MINOR=0
        LORE_ENGINE_VERSION_PATCH=0
        LORE_ENGINE_SIMD_ENABLED        # Enable SIMD optimizations
        LORE_ENGINE_PROFILING_ENABLED   # Enable performance profiling
)

# Engine-wide include directories
target_include_directories(lore_engine
    INTERFACE
        ${CMAKE_SOURCE_DIR}/include
)

# Engine-wide compiler features
target_compile_features(lore_engine
    INTERFACE
        cxx_std_20
)

# Create alias for the complete engine
add_library(lore::engine ALIAS lore_engine)

# Optional: Create a combined static library with all systems
option(LORE_BUILD_COMBINED_LIB "Build a single combined library with all systems" OFF)
if(LORE_BUILD_COMBINED_LIB)
    add_library(lore_combined STATIC
        # This would require listing all source files from all systems
        # For now, we'll use the modular approach with separate libraries
    )

    target_link_libraries(lore_combined
        PUBLIC
            lore::ecs
            lore::math
            lore::physics
            lore::audio
            lore::graphics
    )

    add_library(lore::combined ALIAS lore_combined)
endif()

# Performance testing and benchmarking
option(LORE_BUILD_BENCHMARKS "Build performance benchmarks for core systems" OFF)
if(LORE_BUILD_BENCHMARKS)
    # Add benchmark subdirectory if it exists
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/benchmarks")
        add_subdirectory(benchmarks)
    endif()
endif()

# Unit testing
option(LORE_BUILD_TESTS "Build unit tests for core systems" OFF)
if(LORE_BUILD_TESTS)
    enable_testing()

    # Add test subdirectory if it exists
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/tests")
        add_subdirectory(tests)
    endif()
endif()

# Documentation generation
option(LORE_BUILD_DOCS "Build documentation for core systems" OFF)
if(LORE_BUILD_DOCS)
    find_package(Doxygen QUIET)
    if(DOXYGEN_FOUND)
        # Configure Doxygen settings
        set(DOXYGEN_GENERATE_HTML YES)
        set(DOXYGEN_GENERATE_MAN NO)
        set(DOXYGEN_EXTRACT_ALL YES)
        set(DOXYGEN_CLASS_DIAGRAMS YES)
        set(DOXYGEN_HIDE_UNDOC_RELATIONS NO)
        set(DOXYGEN_HAVE_DOT YES)
        set(DOXYGEN_CLASS_GRAPH YES)
        set(DOXYGEN_COLLABORATION_GRAPH YES)
        set(DOXYGEN_UML_LOOK YES)
        set(DOXYGEN_UML_LIMIT_NUM_FIELDS 50)
        set(DOXYGEN_TEMPLATE_RELATIONS YES)
        set(DOXYGEN_DOT_GRAPH_MAX_NODES 100)
        set(DOXYGEN_MAX_DOT_GRAPH_DEPTH 0)
        set(DOXYGEN_DOT_TRANSPARENT YES)

        doxygen_add_docs(lore_docs
            ${CMAKE_SOURCE_DIR}/include
            ${CMAKE_SOURCE_DIR}/src
            COMMENT "Generating documentation for Lore Engine"
        )
    endif()
endif()

# Installation configuration
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
    include(GNUInstallDirs)

    # Install headers
    install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h" PATTERN "*.inl"
    )

    # Install libraries
    install(TARGETS
        lore_ecs lore_math lore_physics lore_audio lore_graphics lore_engine
        EXPORT lore-targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )

    # Install CMake configuration files
    install(EXPORT lore-targets
        FILE lore-targets.cmake
        NAMESPACE lore::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/lore
    )

    # Create and install config file
    include(CMakePackageConfigHelpers)
    configure_package_config_file(
        "${CMAKE_SOURCE_DIR}/cmake/lore-config.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/lore-config.cmake"
        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/lore
    )

    write_basic_package_version_file(
        "${CMAKE_CURRENT_BINARY_DIR}/lore-config-version.cmake"
        VERSION 1.0.0
        COMPATIBILITY SameMajorVersion
    )

    install(FILES
        "${CMAKE_CURRENT_BINARY_DIR}/lore-config.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/lore-config-version.cmake"
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/lore
    )
endif()